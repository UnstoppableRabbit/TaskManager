@using Domain.Enums
@using Domain.Model
@using TaskManager.Web.Components
@inject TaskApiService taskApiService
@inject UserApiService userApiService

@attribute [Authorize]
@page "/"

<PageTitle>Home</PageTitle>

<div class="container py-4">
    <h1 class="mb-4">Task Tracker</h1>

    <CreateTaskModal @ref="ModalRef" OnTaskCreated="AddTask" />
    <ViewTaskModal @ref="ViewModal" CurrentUser="CurrentUser" OnTaskUpdated="SaveTask" OnTaskDeleted="DeleteTask" />
    <!-- Filters -->
    <div class="row mb-3">
        <div class="col-md-3">
            <label>Пользователь</label>
            <select class="form-select" @bind="FilterUser">
                <option value="">-- Все пользователи --</option>
                @foreach (var user in AllUsers)
                {
                    <option value="@user.Id">@user.Name</option>
                }
            </select>
        </div>

        <div class="col-md-3">
            <label>Создана от</label>
            <input class="form-control" type="date" @bind="CreatedFrom"/>
        </div>

        <div class="col-md-3">
            <label>Создана до</label>
            <input class="form-control" type="date" @bind="CreatedTo"/>
        </div>

        <div class="col-md-3">
            <label>Завершена от</label>
            <input class="form-control" type="date" @bind="ClosedFrom"/>
        </div>

        <div class="col-md-3 mt-2">
            <label>Завершена до</label>
            <input class="form-control" type="date" @bind="ClosedTo"/>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-md-3">
            <button class="btn btn-primary" @onclick="() => ModalRef.Show()">+ New Task</button>
        </div>
    </div>

    <div class="row">
        @foreach (var status in Enum.GetValues(typeof(StatusTask)))
        {
            <Dropzone AllowsDrag="((x) => x.CreatedByUserId == CurrentUser.Id)" Items="FilteredTasks.Where(x => x.Status == (StatusTask)status).ToList()" TItem="TaskItem" OnItemDrop="@((i)=>OnDrop(i, (StatusTask)status))" Class="col-md-4 drop-zone border rounded p-2">
                <ChildContent>
                    <div class="card task-card mb-3" @onclick="() => OpenViewModal(context)">
                        <div class="card-body">
                            <h5 class="card-title">@context.Title</h5>
                            <h6 class="card-subtitle mb-2 text-muted">@(AllUsers.FirstOrDefault(x => x.Id == context.CreatedByUserId)?.Name ?? context.CreatedByUserId.ToString())</h6>
                            <p class="card-text">@context.Description</p>
                            <span class="badge bg-secondary">@context.Status</span>
                            <p class="mt-2 small text-muted">Created: @context.CreatedAt.ToShortDateString()</p>
                        </div>
                    </div>
                </ChildContent>
            </Dropzone>
        }
    </div>
</div>

@code {
    private Guid? filterUser;
    private DateTime? createdFrom;
    private DateTime? createdTo;
    private DateTime? closedFrom;
    private DateTime? closedTo;

    private Guid? FilterUser
    {
        get => filterUser;
        set
        {
            filterUser = value;
            ApplyFilters();
        }
    }

    private DateTime? CreatedFrom
    {
        get => createdFrom;
        set
        {
            createdFrom = value;
            ApplyFilters();
        }
    }

    private DateTime? CreatedTo
    {
        get => createdTo;
        set
        {
            createdTo = value;
            ApplyFilters();
        }
    }

    private DateTime? ClosedFrom
    {
        get => closedFrom;
        set
        {
            closedFrom = value;
            ApplyFilters();
        }
    }

    private DateTime? ClosedTo
    {
        get => closedTo;
        set
        {
            closedTo = value;
            ApplyFilters();
        }
    }
    Guid DraggedTaskId;

    User CurrentUser = new();
    List<TaskItem> AllTasks = new();
    List<TaskItem> FilteredTasks = new();
    List<User> AllUsers = new();

    protected override async Task OnInitializedAsync()
    {
        AllTasks = (await taskApiService.GetTasksAsync())?.ToList();
        AllUsers = (await userApiService.GetAllUsersAsync())?.ToList();
        CurrentUser = await userApiService.GetCurrentUserAsync();
        ApplyFilters();
    }

    readonly Dictionary<StatusTask, string> statusLabels = new()
    {
        { StatusTask.Created, "Created" },
        { StatusTask.InProgress, "In Progress" },
        { StatusTask.Done, "Completed" }
    };
    private CreateTaskModal? ModalRef;

    private async Task AddTask(TaskItem newTask)
    {
        AllTasks.Add(await taskApiService.CreateTaskAsync(newTask));
        StateHasChanged();
    }

    private ViewTaskModal? ViewModal;

    private async Task OpenViewModal(TaskItem task)
    {
        ViewModal!.Task = task;
        ViewModal.Show();
    }

    private async Task SaveTask(TaskItem task)
    {
        await taskApiService.UpdateTaskAsync(task.Id, task);
    }
    private async Task DeleteTask(TaskItem task)
    {
        await taskApiService.DeleteTaskAsync(task.Id);
        AllTasks.Remove(task);
        StateHasChanged();
    }

    private void ApplyFilters(ChangeEventArgs? _ = null)
    {
        FilteredTasks = AllTasks
            .Where(t => !FilterUser.HasValue || t.CreatedByUserId == FilterUser)
            .Where(t => !CreatedFrom.HasValue || t.CreatedAt.Date >= CreatedFrom.Value.Date)
            .Where(t => !CreatedTo.HasValue || t.CreatedAt.Date <= CreatedTo.Value.Date)
            .Where(t => !ClosedFrom.HasValue || (t.ClosedAt.HasValue && t.ClosedAt.Value.Date >= ClosedFrom.Value.Date))
            .Where(t => !ClosedTo.HasValue || (t.ClosedAt.HasValue && t.ClosedAt.Value.Date <= ClosedTo.Value.Date))
            .ToList();
    }

    void OnDragStart(DragEventArgs e, Guid taskId)
    {
        DraggedTaskId = taskId;
    }

    void OnDrop(TaskItem task, StatusTask newStatus)
    {
        if (task is not null && task.Status != newStatus)
        {
            task.Status = newStatus;
        }

        StateHasChanged();
    }
}