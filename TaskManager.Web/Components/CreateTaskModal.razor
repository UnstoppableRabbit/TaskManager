@using Domain.Enums
@using Domain.Model


@if (IsVisible)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Создание задачи</h5>
                    <button type="button" class="btn-close" @onclick="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Название</label>
                        <input class="form-control" @bind="NewTask.Title" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Описание</label>
                        <textarea class="form-control" @bind="NewTask.Description"></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Статус</label>
                        <select class="form-select" @bind="NewTask.Status">
                            <option value="Created">Создана</option>
                            <option value="InProgress">В работе</option>
                            <option value="Done">Завершена</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Ориентировочное завершение</label>
                        <input class="form-control" type="datetime-local" @bind="NewTask.EstimatedFinishAt" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Фактическое время выполнения (часы:минуты)</label>
                        <input class="form-control"
                               placeholder="например: 01:30"
                               @bind="ActualDurationText"
                               @onblur="ParseDuration" />
                    </div>
                    @if (NewTask.Status == StatusTask.Done)
                    {
                        <div class="mb-3">
                            <label class="form-label">Дата/время завершения</label>
                            <input class="form-control" type="datetime-local" @bind="NewTask.ClosedAt" />
                        </div>
                    }
                    <div class="mb-3">
                        <label class="form-label">Комментарии</label>
                        <ul class="list-group mb-2">
                            @foreach (var c in NewTask.Comments)
                            {
                                <li class="list-group-item">@c.Text</li>
                            }
                        </ul>
                        <div class="input-group">
                            <input class="form-control" placeholder="Новый комментарий" @bind="NewComment" />
                            <button class="btn btn-outline-secondary" type="button" @onclick="AddComment">+</button>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="Close">Отмена</button>
                    <button class="btn btn-primary" @onclick="Submit">Создать</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public EventCallback<TaskItem> OnTaskCreated { get; set; }

    private TaskItem NewTask = new();
    private string? NewComment;
    private bool IsVisible = false;
    private string? ActualDurationText;

    public void Show()
    {
        NewTask = new TaskItem
            {
                CreatedAt = DateTime.UtcNow,
                Status = StatusTask.Created
            };
        IsVisible = true;
        StateHasChanged();
    }

    private void Close() => IsVisible = false;

    private void AddComment()
    {
        if (!string.IsNullOrWhiteSpace(NewComment))
        {
            NewTask.Comments.Add(new Comment { CreatedAt = DateTime.Now, Text = NewComment.Trim(), UserId = Guid.Empty});
            NewComment = string.Empty;
        }
    }

    private void ParseDuration()
    {
        if (TimeSpan.TryParse(ActualDurationText, out var parsed))
        {
            NewTask.ActualDuration = parsed;
        }
        else
        {
            NewTask.ActualDuration = null;
        }
    }

    void ParseDuration(string? input)
    {
        if (TimeSpan.TryParse(input, out var span))
            NewTask.ActualDuration = span;
    }

    private async Task Submit()
    {
        if (NewTask.Status == StatusTask.Done && !NewTask.ClosedAt.HasValue)
            NewTask.ClosedAt = DateTime.UtcNow;

        await OnTaskCreated.InvokeAsync(NewTask);
        IsVisible = false;
    }
}