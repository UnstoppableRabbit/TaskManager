@using Domain.Enums
@using Domain.Model

@if (IsVisible)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Просмотр задачи</h5>
                    <button type="button" class="btn-close" @onclick="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Название</label>
                        <input class="form-control" value="@taskCopy.Title" disabled />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Описание</label>
                        <textarea class="form-control" value="@taskCopy.Description" disabled></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Статус</label>
                        @if (CurrentUser.Id != taskCopy.CreatedByUserId)
                        {
                            <select class="form-select" @bind="taskCopy.Status" disabled>
                                <option value="Created">Создана</option>
                                <option value="InProgress">В работе</option>
                                <option value="Done">Завершена</option>
                            </select>
                        }
                        else
                        {
                            <select class="form-select" @bind="taskCopy.Status">
                                <option value="Created">Создана</option>
                                <option value="InProgress">В работе</option>
                                <option value="Done">Завершена</option>
                            </select>
                        }
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Фактическое время выполнения (часы:минуты)</label>
                        @if (CurrentUser.Id != taskCopy.CreatedByUserId)
                        {
                            <input class="form-control"
                                   placeholder="например: 01:30"
                                   disabled
                                   @bind="ActualDurationText"
                                   @onblur="ParseDuration" />
                        }
                        else
                        {
                            <input class="form-control"
                                   placeholder="например: 01:30"
                                   @bind="ActualDurationText"
                                   @onblur="ParseDuration" />
                        }
                    </div>
                    @if (taskCopy.Status == StatusTask.Done)
                    {
                        <div class="mb-3">
                            <label class="form-label">Дата завершения</label>
                            @if (CurrentUser.Id != taskCopy.CreatedByUserId)
                            {
                                <input class="form-control" type="datetime-local" value="@taskCopy.ClosedAt" disabled />
                            }
                            else
                            {
                                <input class="form-control" type="datetime-local" @bind="taskCopy.ClosedAt" />
                            }
                        </div>
                    }
                    <div class="mb-3">
                        <label class="form-label">Комментарии</label>
                        <ul class="list-group mb-2">
                            @foreach (var c in taskCopy.Comments)
                            {
                                <li class="list-group-item">@c.Text (@c.CreatedAt)</li>
                            }
                        </ul>
                        <div class="input-group">
                            <input class="form-control" placeholder="Новый комментарий" @bind="NewComment" />
                            <button class="btn btn-outline-secondary" type="button" @onclick="AddComment">+</button>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    @if(taskCopy.CreatedByUserId == CurrentUser.Id)
                    {
                        <button class="btn btn-danger me-auto" @onclick="Delete">Удалить</button>
                    }
                    <button class="btn btn-secondary" @onclick="Close">Закрыть</button>
                    @if (taskCopy.CreatedByUserId == CurrentUser.Id)
                    {

                        <button class="btn btn-primary" @onclick="Submit">Сохранить изменения</button>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public TaskItem Task { get; set; } = default!;
    [Parameter] public User CurrentUser { get; set; } = default!;
    [Parameter] public EventCallback<TaskItem> OnTaskUpdated { get; set; }
    [Parameter] public EventCallback<TaskItem> OnTaskDeleted { get; set; }

    private string? ActualDurationText;
    private string? NewComment;
    private bool IsVisible = false;
    public TaskItem taskCopy { get; set; } = default!;
    public void Show()
    {
        ActualDurationText = Task.ActualDuration?.ToString(@"hh\:mm");
        IsVisible = true;
        taskCopy = new TaskItem
        {
            Title = Task.Title,
            Description = Task.Description,
            Status = Task.Status,
            CreatedAt = Task.CreatedAt,
            ClosedAt = Task.ClosedAt,
            ActualDuration = Task.ActualDuration,
            Comments = Task.Comments.ToList(),
            CreatedByUserId = Task.CreatedByUserId
        };
        StateHasChanged();
    }

    private async Task Delete()
    {
        IsVisible = false;
        await OnTaskDeleted.InvokeAsync(Task);
    }

    private void Close() => IsVisible = false;

    private void ParseDuration()
    {
        if (TimeSpan.TryParse(ActualDurationText, out var parsed))
            taskCopy.ActualDuration = parsed;
    }

    private void AddComment()
    {
        if (!string.IsNullOrWhiteSpace(NewComment))
        {
            Task.Comments.Add(new Comment
                {
                    CreatedAt = DateTime.UtcNow,
                    Text = NewComment.Trim(),
                    UserId = Guid.Empty
                });
            NewComment = string.Empty;
        }
    }

    private async Task Submit()
    {
        Task.Status = taskCopy.Status;
        Task.Comments = taskCopy.Comments;
        Task.ActualDuration = taskCopy.ActualDuration;
        Task.ClosedAt = taskCopy.ClosedAt;

        if (Task.Status == StatusTask.Done && !Task.ClosedAt.HasValue)
            Task.ClosedAt = DateTime.UtcNow;

        await OnTaskUpdated.InvokeAsync(Task);
        IsVisible = false;
    }
}
